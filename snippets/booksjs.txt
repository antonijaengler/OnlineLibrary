const express = require('express');
const router = express.Router();
const sqlite3 = require('sqlite3').verbose();

function getBestBooks() {
    return new Promise((resolve, reject) => {
        // open the database
        let db = new sqlite3.Database('./data/db/database.db', sqlite3.OPEN_READ, (err) => {
            if (err) {
                console.log("Error" + err.message);
                reject(err);
            }
            console.log('Connected to the database.');
        });

        let best_books = [];

        db.serialize(() => {
            db.each(`SELECT title, author, yearofpublication, publisher, imageurlm
                    FROM ratings
                    JOIN books ON ratings.isbn = books.isbn
                    WHERE rating = 5
                    LIMIT 10`, (err, row) => {
                if (err) {
                    console.error(err.message);
                    reject(err);
                }
                best_books.push(row);
            },
            () => {
                resolve(best_books);
            });
        });

        db.close((err) => {
        if (err) {
            console.log(err.message);
        }
        console.log('Close the database connection.');
        });
    });
}

router.get('/', (req, res) => {
    (async() => {
        // send results
        res.status(200);
        res.render('home', {
            title: 'Home',
            linkActive: 'home',
            books: await getBestBooks()
        });
    })();
});

module.exports = router;


#### New Version ####
const express = require('express');
const router = express.Router();
const sqlite3 = require('sqlite3').verbose();
const authHandler = require('./auth-handler');

function getNBooks(rowSize, step) {
    return new Promise((resolve, reject) => {
        // open the database
        let db = new sqlite3.Database('./data/db/database.db', sqlite3.OPEN_READ, (err) => {
            if (err) {
                console.log("Error" + err.message);
                reject(err);
            }
            console.log('Connected to the database.');
        });

        let best_books = [];

        db.serialize(() => {
            db.each(`SELECT title, author, yearofpublication, publisher, imageurls
                    FROM books
                    LIMIT ${rowSize} OFFSET ${step}`, (err, row) => {
                if (err) {
                    console.error(err.message);
                    reject(err);
                }
                best_books.push(row);
            },
            () => {
                resolve(best_books);
            });
        });

        db.close((err) => {
            if (err) {
                console.log(err.message);
            }
            console.log('Close the database connection.');
        });
    });
}

function getBooksSize() {
    return new Promise((resolve, reject) => {
        // open the database
        let db = new sqlite3.Database('./data/db/database.db', sqlite3.OPEN_READ, (err) => {
            if (err) {
                console.log("Error" + err.message);
                reject(err);
            }
            console.log('Connected to the database.');
        });

        db.get(`SELECT COUNT(*) as 'count' FROM books`, (err, row) => {
            if (err) {
                console.error(err.message);
                reject(err);
            }

            if (!row || row.count === undefined) {
                resolve(0);
            } else {
                resolve(row.count);
            }
        });

        db.close((err) => {
            if (err) {
                console.log(err.message);
            }
            console.log('Close the database connection.');
        });
    });
}

router.get('/', (req, res) => {
    (async() => {
        let page = parseInt(req.query.page) || 1;
        const rowSize = 20;
        let books = await getNBooks(rowSize, (page-1) * rowSize);
        let totalCount = Object.keys(books).length;
        let sizeofBooks = await getBooksSize();
        let total = Math.ceil(sizeofBooks / rowSize);
        res.status(200);
        res.render('books', {
            title: 'Book list',
            currentPage: page,
            totalPages: total,
            totalCount: totalCount,
            sizeofBooks: sizeofBooks,
            books: books,
            rowSize: rowSize,
            user: req.session.user
        });
    })();
});

module.exports = router;


#### NEW VERSION ####
const express = require('express');
const router = express.Router();
const sqlite3 = require('sqlite3').verbose();
const authHandler = require('./auth-handler');
const Book = require('../models/BookModel');
const methodOverride = require('method-override');

router.use(methodOverride('_method'));

router.get('/', authHandler, (req, res) => {
    (async() => {
        let page = parseInt(req.query.page) || 1;
        const rowSize = 20;
        let books = await Book.getNBooks(rowSize, (page-1) * rowSize, req.session.user.userid);
        let totalCount = Object.keys(books).length;
        let sizeofBooks = await Book.getBooksSize(req.session.user.userid);
        let total = Math.ceil(sizeofBooks / rowSize);
        res.status(200);
        res.render('books', {
            title: 'Book list',
            currentPage: page,
            totalPages: total,
            totalCount: totalCount,
            books: books,
            rowSize: rowSize,
            user: req.session.user,
            specificUser: undefined
        });
    })();
});

router.get('/add', authHandler, (req, res) => {
    res.render('addbook', {
        title: "Add new book",
        user: req.session.user,
        err: undefined
    });
});

router.post('/', authHandler, (req, res) =>{
    (async () => {
        let book = new Book(req.body.isbn, req.body.title, req.body.author, req.body.yearofpublication, req.body.publisher);
        book.rating = req.body.rating || 0;
        await book.add(parseInt(req.session.user.userid));
        console.log(book);

        let page = parseInt(req.query.page) || 1;
        const rowSize = 20;
        let books = await Book.getNBooks(rowSize, (page-1) * rowSize, req.session.user.userid);
        let totalCount = Object.keys(books).length;
        let sizeofBooks = await Book.getBooksSize(req.session.user.userid);
        let total = Math.ceil(sizeofBooks / rowSize);
        res.status(200);
        res.render('books', {
            title: 'Book list',
            currentPage: page,
            totalPages: total,
            totalCount: totalCount,
            books: books,
            rowSize: rowSize,
            user: req.session.user,
            specificUser: undefined
        });
    })();
});

router.get('/edit/:isbn', authHandler, (req, res) => {
    (async () => {
        console.log("I'm in edit!");
        let book = await Book.getBookByISBN(req.params.isbn);
        res.render('editbook', {
            title: "Edit book",
            user: req.session.user,
            book: book,
            err: undefined
        });
    })();
});

router.delete('/delete/:isbn', authHandler, (req, res) => {
    console.log("I'm in delete!");
    (async () => {
        let book = await Book.getBookByISBN(req.params.isbn);
        console.log(book);

        await book.delete(req.session.user.userid);
        let page = parseInt(req.query.page) || 1;
        const rowSize = 20;
        let books = await Book.getNBooks(rowSize, (page-1) * rowSize, req.session.user.userid);
        let totalCount = Object.keys(books).length;
        let sizeofBooks = await Book.getBooksSize(req.session.user.userid);
        let total = Math.ceil(sizeofBooks / rowSize);
        res.status(200);
        res.render('books', {
            title: 'Book list',
            currentPage: page,
            totalPages: total,
            totalCount: totalCount,
            books: books,
            rowSize: rowSize,
            user: req.session.user,
            specificUser: undefined
        });
    })();
});

router.get('/:isbn', authHandler, (req, res) => {
    (async () => {
        console.log("I'm in get for specific book: ", req.params.isbn);
        let book = await Book.getBookByISBN(req.params.isbn);
        res.status(200);
        res.render('book', {
            title: "Book showcase",
            book: book,
            user: req.session.user
        });
    })();    
});

router.put('/:isbn', authHandler, (req, res) => {
    console.log("I got into put!");
    (async () => {
        let oldBook = await Book.getBookByISBN(req.params.isbn);
        let newBook = new Book(req.params.isbn, req.body.title, req.body.author, req.body.yearofpublication, req.body.publisher);
        newBook.imageurls = req.body.imageurls;
        newBook.imageurlm = req.body.imageurlm;
        newBook.imageurll = req.body.imageurll;
        newBook.rating = parseInt(req.body.rating);

        console.log("Old Book: ", oldBook);
        console.log("New Book: ", newBook);

        await newBook.update(parseInt(req.session.user.userid));
        let book = await Book.getBookByISBN(req.params.isbn);
        res.status(200);
        res.render('book', {
            title: "Book showcase",
            book: book,
            user: req.session.user
        });
    })();
});

module.exports = router;